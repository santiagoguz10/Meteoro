{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n/**\n * @name App Preferences\n * @description\n * This plugin allows you to read and write app preferences\n *\n * @usage\n * ```typescript\n * import { AppPreferences } from '@ionic-native/app-preferences/ngx';\n *\n * constructor(private appPreferences: AppPreferences) { }\n *\n * ...\n *\n * this.appPreferences.fetch('key').then((res) => { console.log(res); });\n *\n * ```\n *\n */\nexport declare class AppPreferences extends IonicNativePlugin {\n    /**\n     * Get a preference value\n     *\n     * @param {string} dict Dictionary for key (OPTIONAL)\n     * @param {string} key Key\n     * @return {Promise<any>} Returns a promise\n     */\n    fetch(dict: string, key?: string): Promise<any>;\n    /**\n     * Set a preference value\n     *\n     * @param {string} dict Dictionary for key (OPTIONAL)\n     * @param {string} key Key\n     * @param {any} value Value\n     * @return {Promise<any>} Returns a promise\n     */\n    store(dict: string, key: string, value?: any): Promise<any>;\n    /**\n     * Remove value from preferences\n     *\n     * @param {string} dict Dictionary for key (OPTIONAL)\n     * @param {string} key Key\n     * @return {Promise<any>} Returns a promise\n     */\n    remove(dict: string, key?: string): Promise<any>;\n    /**\n     * Clear preferences\n     *\n     * @return {Promise<any>} Returns a promise\n     */\n    clearAll(): Promise<any>;\n    /**\n     * Show native preferences interface\n     *\n     * @return {Promise<any>} Returns a promise\n     */\n    show(): Promise<any>;\n    /**\n     * Show native preferences interface\n     *\n     * @param {boolean} subscribe true value to subscribe, false - unsubscribe\n     * @return {Observable<any>} Returns an observable\n     */\n    watch(subscribe: boolean): Observable<any>;\n    /**\n     * Return named configuration context\n     * In iOS you'll get a suite configuration, on Android â€” named file\n     * Supports: Android, iOS\n     * @param {string} suiteName suite name\n     * @returns {Object} Custom object, bound to that suite\n     */\n    suite(suiteName: string): any;\n    iosSuite(suiteName: string): any;\n    /**\n     * Return cloud synchronized configuration context\n     * Currently supports Windows and iOS/macOS\n     * @returns {Object} Custom object, bound to that suite\n     */\n    cloudSync(): Object;\n    /**\n     * Return default configuration context\n     * Currently supports Windows and iOS/macOS\n     * @returns {Object} Custom Object, bound to that suite\n     */\n    defaults(): Object;\n}\n"]}