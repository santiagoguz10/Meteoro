'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core$1 = require('@angular/core');
var core = require('@ionic-native/core');
var rxjs = require('rxjs');

var ɵngcc0 = require('@angular/core');
var Geolocation = /** @class */ (function (_super) {
    tslib.__extends(Geolocation, _super);
    function Geolocation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Geolocation.prototype.getCurrentPosition = function (options) { return core.cordova(this, "getCurrentPosition", { "callbackOrder": "reverse" }, arguments); };
    /**
     * Watch the current device's position.  Clear the watch by unsubscribing from
     * Observable changes.
     *
     * ```typescript
     * const subscription = this.geolocation.watchPosition()
     *                               .filter((p) => p.coords !== undefined) //Filter Out Errors
     *                               .subscribe(position => {
     *   console.log(position.coords.longitude + ' ' + position.coords.latitude);
     * });
     *
     * // To stop notifications
     * subscription.unsubscribe();
     * ```
     *
     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).
     * @returns {Observable<Geoposition | PositionError>} Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.
     */
    Geolocation.prototype.watchPosition = function (options) {
        return new rxjs.Observable(function (observer) {
            var watchId = navigator.geolocation.watchPosition(observer.next.bind(observer), observer.next.bind(observer), options);
            return function () { return navigator.geolocation.clearWatch(watchId); };
        });
    };
    Geolocation.pluginName = "Geolocation";
    Geolocation.plugin = "cordova-plugin-geolocation";
    Geolocation.pluginRef = "navigator.geolocation";
    Geolocation.repo = "https://github.com/apache/cordova-plugin-geolocation";
    Geolocation.install = "ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\"To locate you\"";
    Geolocation.installVariables = ["GEOLOCATION_USAGE_DESCRIPTION"];
    Geolocation.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
Geolocation.ɵfac = function Geolocation_Factory(t) { return ɵGeolocation_BaseFactory(t || Geolocation); };
Geolocation.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Geolocation, factory: function (t) { return Geolocation.ɵfac(t); } });
var ɵGeolocation_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Geolocation);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Geolocation, [{
        type: core$1.Injectable
    }], null, null); })();
    return Geolocation;
}(core.IonicNativePlugin));

exports.Geolocation = Geolocation;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7MEJBR007QUFDTjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBjb3JlJDEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJ0Bpb25pYy1uYXRpdmUvY29yZScpO1xudmFyIHJ4anMgPSByZXF1aXJlKCdyeGpzJyk7XG5cbnZhciBHZW9sb2NhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoR2VvbG9jYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gR2VvbG9jYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgR2VvbG9jYXRpb24ucHJvdG90eXBlLmdldEN1cnJlbnRQb3NpdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybiBjb3JlLmNvcmRvdmEodGhpcywgXCJnZXRDdXJyZW50UG9zaXRpb25cIiwgeyBcImNhbGxiYWNrT3JkZXJcIjogXCJyZXZlcnNlXCIgfSwgYXJndW1lbnRzKTsgfTtcbiAgICAvKipcbiAgICAgKiBXYXRjaCB0aGUgY3VycmVudCBkZXZpY2UncyBwb3NpdGlvbi4gIENsZWFyIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb21cbiAgICAgKiBPYnNlcnZhYmxlIGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy5nZW9sb2NhdGlvbi53YXRjaFBvc2l0aW9uKClcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChwKSA9PiBwLmNvb3JkcyAhPT0gdW5kZWZpbmVkKSAvL0ZpbHRlciBPdXQgRXJyb3JzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShwb3NpdGlvbiA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZyhwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlICsgJyAnICsgcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIFRvIHN0b3Agbm90aWZpY2F0aW9uc1xuICAgICAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtHZW9sb2NhdGlvbk9wdGlvbnN9IG9wdGlvbnMgIFRoZSBbZ2VvbG9jYXRpb24gb3B0aW9uc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uT3B0aW9ucykuXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8R2VvcG9zaXRpb24gfCBQb3NpdGlvbkVycm9yPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgd2l0aCB0aGUgW3Bvc2l0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUG9zaXRpb24pIG9mIHRoZSBkZXZpY2UsIG9yIGVycm9ycy5cbiAgICAgKi9cbiAgICBHZW9sb2NhdGlvbi5wcm90b3R5cGUud2F0Y2hQb3NpdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgcnhqcy5PYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHdhdGNoSWQgPSBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIpLCBvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uY2xlYXJXYXRjaCh3YXRjaElkKTsgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBHZW9sb2NhdGlvbi5wbHVnaW5OYW1lID0gXCJHZW9sb2NhdGlvblwiO1xuICAgIEdlb2xvY2F0aW9uLnBsdWdpbiA9IFwiY29yZG92YS1wbHVnaW4tZ2VvbG9jYXRpb25cIjtcbiAgICBHZW9sb2NhdGlvbi5wbHVnaW5SZWYgPSBcIm5hdmlnYXRvci5nZW9sb2NhdGlvblwiO1xuICAgIEdlb2xvY2F0aW9uLnJlcG8gPSBcImh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZ2VvbG9jYXRpb25cIjtcbiAgICBHZW9sb2NhdGlvbi5pbnN0YWxsID0gXCJpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tZ2VvbG9jYXRpb24gLS12YXJpYWJsZSBHRU9MT0NBVElPTl9VU0FHRV9ERVNDUklQVElPTj1cXFwiVG8gbG9jYXRlIHlvdVxcXCJcIjtcbiAgICBHZW9sb2NhdGlvbi5pbnN0YWxsVmFyaWFibGVzID0gW1wiR0VPTE9DQVRJT05fVVNBR0VfREVTQ1JJUFRJT05cIl07XG4gICAgR2VvbG9jYXRpb24ucGxhdGZvcm1zID0gW1wiQW1hem9uIEZpcmUgT1NcIiwgXCJBbmRyb2lkXCIsIFwiQnJvd3NlclwiLCBcImlPU1wiLCBcIldpbmRvd3NcIl07XG4gICAgR2VvbG9jYXRpb24uZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBjb3JlJDEuSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gR2VvbG9jYXRpb247XG59KGNvcmUuSW9uaWNOYXRpdmVQbHVnaW4pKTtcblxuZXhwb3J0cy5HZW9sb2NhdGlvbiA9IEdlb2xvY2F0aW9uO1xuIl19